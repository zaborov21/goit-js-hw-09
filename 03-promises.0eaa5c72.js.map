{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAUC,SAASC,cAAc,aACjCC,EAAW,GAiCjB,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA5CPN,EAAQc,iBAAiB,SAGzB,SAAgBC,GACdZ,EAASY,EAAMC,OAAOC,MAAQF,EAAMC,OAAOE,K,IAH7ClB,EAAQc,iBAAiB,UAKzB,SAAkBC,GAEhBA,EAAMI,iBAMN,IAJA,IAAIC,EAAaC,OAAOlB,EAASG,OAC7BgB,EAAYD,OAAOlB,EAASoB,MAC5BC,EAAcH,OAAOlB,EAASsB,QAEzBC,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EAErCtB,EAAcsB,EAAGN,GACdO,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,EAAA/B,GAASgC,OAAOC,QAAQ,qBAAoCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,OAClE2B,QAAQC,IAAI,uBAAwCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAE3D6B,OAAM,SAAAP,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,EAAA/B,GAASgC,OAAOM,QAAQ,oBAAmCJ,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,OACjE2B,QAAQC,IAAI,sBAAqCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAE3Dc,GAAcE,EAEhBP,EAAMC,OAAOqB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport \"notiflix/dist/notiflix-3.2.6.min.css\";\n\nconst formRef = document.querySelector(\"form.form\");\nconst formData = {};\n\nformRef.addEventListener(\"input\", onForm);\nformRef.addEventListener(\"submit\", onSubmit);\n\nfunction onForm(event) {\n  formData[event.target.name] = event.target.value;\n}\nfunction onSubmit(event) {\n\n  event.preventDefault();\n\n  let inputDelay = Number(formData.delay);\n  let inputStep = Number(formData.step);\n  let inputAmount = Number(formData.amount);\n\n  for (let i = 1; i <= inputAmount; i += 1) {\n\n    createPromise(i, inputDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`)\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`)\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    inputDelay += inputStep;\n  }\n  event.target.reset();\n};\n\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$formData","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","target","name","value","preventDefault","inputDelay","Number","inputStep","step","inputAmount","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","console","log","catch","failure","reset"],"version":3,"file":"03-promises.0eaa5c72.js.map"}